{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/launch-details/launch-details.component.html","webpack:///./src/app/launch-list/launch-list.component.html","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/graphql.module.ts","webpack:///./src/app/launch-details/launch-details.component.css","webpack:///./src/app/launch-details/launch-details.component.ts","webpack:///./src/app/launch-list/launch-list.component.css","webpack:///./src/app/launch-list/launch-list.component.ts","webpack:///./src/app/relative-time/relative-time.pipe.ts","webpack:///./src/app/services/spacexGraphql.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<router-outlet></router-outlet>\\n\"","module.exports = \"<ng-container *ngIf=\\\"launchDetails$ | async as launchDetails\\\">\\n    <section style=\\\"padding-top: 20px;\\\">\\n      <mat-card style=\\\"width: 400px; margin: auto;\\\">\\n        <mat-card-header>\\n          <mat-card-title>{{ launchDetails.mission_name }}</mat-card-title>\\n        </mat-card-header>\\n        <img\\n          height=\\\"256\\\"\\n          width=\\\"256\\\"\\n          mat-card-image\\n          [src]=\\\"launchDetails.links.mission_patch\\\"\\n          alt=\\\"Mission patch of {{ launchDetails.mission_name }}\\\"\\n        />\\n        <mat-card-content>\\n          <p>{{ launchDetails.details }}</p>\\n        </mat-card-content>\\n      </mat-card>\\n    </section>\\n    <section class=\\\"photo-grid\\\">\\n      <img\\n        *ngFor=\\\"let pic of launchDetails.links.flickr_images\\\"\\n        [src]=\\\"pic\\\"\\n        alt=\\\"Picture of {{ launchDetails.mission_name }}\\\"\\n        height=\\\"300\\\"\\n        width=\\\"300\\\"\\n        loading=\\\"lazy\\\"\\n      />\\n    </section>\\n  </ng-container>\\n\"","module.exports = \"<ng-container *ngIf=\\\"pastLaunches$ | async as pastLaunches\\\">\\n    <main>\\n      <section class=\\\"container\\\">\\n        <mat-card\\n          *ngFor=\\\"let launch of pastLaunches\\\"\\n          [routerLink]=\\\"['/', launch.id]\\\"\\n        >\\n          <mat-card-header>\\n            <img\\n              height=\\\"50\\\"\\n              width=\\\"50\\\"\\n              mat-card-avatar\\n              loading=\\\"lazy\\\"\\n              [src]=\\\"launch.links.mission_patch_small\\\"\\n              alt=\\\"Mission patch of {{launch.mission_name}} \\\"\\n            />\\n            <mat-card-title>{{ launch.mission_name }}</mat-card-title>\\n            <mat-card-subtitle\\n              >{{ launch.rocket.rocket_name }}</mat-card-subtitle\\n            >\\n          </mat-card-header>\\n          <img\\n            height=\\\"300\\\"\\n            width=\\\"300\\\"\\n            mat-card-image\\n            loading=\\\"lazy\\\"\\n            [src]=\\\"launch.links.flickr_images[0]\\\"\\n            alt=\\\"Photo of {{launch.mission_name}}\\\"\\n          />\\n          <mat-card-subtitle\\n  >{{ launch.rocket.rocket_name }} - launched {{ launch.launch_date_utc |\\n  relativeTime }}</mat-card-subtitle\\n>\\n        </mat-card>\\n      </section>\\n    </main>\\n  </ng-container>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LaunchListComponent } from './launch-list/launch-list.component';\nimport { LaunchDetailsComponent } from './launch-details/launch-details.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LaunchListComponent\n  },\n  {\n    path: ':id',\n    component: LaunchDetailsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'SpaceX';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LaunchListComponent } from './launch-list/launch-list.component';\nimport { LaunchDetailsComponent } from './launch-details/launch-details.component';\nimport { GraphQLModule } from './graphql.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { RelativeTimePipe } from './relative-time/relative-time.pipe';\n@NgModule({\n  declarations: [\n    AppComponent,\n    LaunchListComponent,\n    LaunchDetailsComponent,\n    RelativeTimePipe\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    GraphQLModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatCardModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {NgModule} from '@angular/core';\nimport {ApolloModule, APOLLO_OPTIONS} from 'apollo-angular';\nimport {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nconst uri = 'https://api.spacex.land/graphql/';\nexport function createApollo(httpLink: HttpLink) {\n  return {\n    link: httpLink.create({uri}),\n    cache: new InMemoryCache(),\n  };\n}\n\n@NgModule({\n  exports: [ApolloModule, HttpLinkModule],\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","module.exports = \"  .photo-grid {\\n    padding-top: 30px;\\n    display: grid;\\n    grid-gap: 10px;\\n    grid-template-columns: repeat(auto-fill, 300px);\\n    justify-content: center;\\n  }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF1bmNoLWRldGFpbHMvbGF1bmNoLWRldGFpbHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiRUFBRTtJQUNFLGlCQUFpQjtJQUNqQixhQUFhO0lBQ2IsY0FBYztJQUNkLCtDQUErQztJQUMvQyx1QkFBdUI7RUFDekIiLCJmaWxlIjoic3JjL2FwcC9sYXVuY2gtZGV0YWlscy9sYXVuY2gtZGV0YWlscy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiICAucGhvdG8tZ3JpZCB7XG4gICAgcGFkZGluZy10b3A6IDMwcHg7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLWdhcDogMTBweDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIDMwMHB4KTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgfVxuIl19 */\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { map, switchMap } from 'rxjs/operators';\nimport { LaunchDetailsGQL } from '../services/spacexGraphql.service';\n\n\n@Component({\n  selector: 'app-launch-details',\n  templateUrl: './launch-details.component.html',\n  styleUrls: ['./launch-details.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\n\n\n\nexport class LaunchDetailsComponent {\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly launchDetailsService: LaunchDetailsGQL\n  ) {}\n\n  launchDetails$ = this.route.paramMap.pipe(\n    map((params) => params.get('id') as string),\n    switchMap((id) => this.launchDetailsService.fetch({ id })),\n    map((res) => res.data.launch)\n  );\n}\n","module.exports = \".container {\\n    padding-top: 20px;\\n    display: grid;\\n    grid-gap: 30px;\\n    grid-template-columns: repeat(auto-fill, 350px);\\n    justify-content: center;\\n  }\\n  \\n  .mat-card {\\n    cursor: pointer;\\n  }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF1bmNoLWxpc3QvbGF1bmNoLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGlCQUFpQjtJQUNqQixhQUFhO0lBQ2IsY0FBYztJQUNkLCtDQUErQztJQUMvQyx1QkFBdUI7RUFDekI7O0VBRUE7SUFDRSxlQUFlO0VBQ2pCIiwiZmlsZSI6InNyYy9hcHAvbGF1bmNoLWxpc3QvbGF1bmNoLWxpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC1nYXA6IDMwcHg7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCAzNTBweCk7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cbiAgXG4gIC5tYXQtY2FyZCB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4iXX0= */\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { PastLaunchesListGQL } from '../services/spacexGraphql.service';\n\n\n\n@Component({\n  selector: 'app-launch-list',\n  templateUrl: './launch-list.component.html',\n  styleUrls: ['./launch-list.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\n\n\nexport class LaunchListComponent {\n  constructor(private readonly pastLaunchesService: PastLaunchesListGQL) {}\n\n  // Please be careful to not fetch too much, but this amount lets us see lazy loading imgs in action\n  pastLaunches$ = this.pastLaunchesService\n    .fetch({ limit: 30 })\n    // Here we extract our query data, we can also get info like errors or loading state from res\n    .pipe(map((res) => res.data.launchesPast));\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nconst milliSecondsInDay = 1000 * 3600 * 24;\n\n// Cast as any because typescript typing haven't updated yet\nconst rtf = new (Intl as any).RelativeTimeFormat('en');\n\n@Pipe({\n  name: 'relativeTime'\n})\nexport class RelativeTimePipe implements PipeTransform {\n  transform(utcTime: string): string {\n    const diffInMillicseconds =\n      new Date(utcTime).getTime() - new Date().getTime();\n    const diffInDays = Math.round(diffInMillicseconds / milliSecondsInDay);\n    return rtf.format(diffInDays, 'day');\n  }\n}\n","import gql from 'graphql-tag';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Date: any,\n  ObjectID: any,\n};\n\n\n\n\nexport type Address = {\n   __typename?: 'Address',\n  address?: Maybe<Scalars['String']>,\n  city?: Maybe<Scalars['String']>,\n  state?: Maybe<Scalars['String']>,\n};\n\nexport type Capsule = {\n   __typename?: 'Capsule',\n  id?: Maybe<Scalars['ID']>,\n  landings?: Maybe<Scalars['Int']>,\n  missions?: Maybe<Array<Maybe<CapsuleMission>>>,\n  original_launch?: Maybe<Scalars['Date']>,\n  reuse_count?: Maybe<Scalars['Int']>,\n  status?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  dragon?: Maybe<Dragon>,\n};\n\nexport type CapsuleMission = {\n   __typename?: 'CapsuleMission',\n  flight?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type CapsulesFind = {\n  id?: Maybe<Scalars['ID']>,\n  landings?: Maybe<Scalars['Int']>,\n  mission?: Maybe<Scalars['String']>,\n  original_launch?: Maybe<Scalars['Date']>,\n  reuse_count?: Maybe<Scalars['Int']>,\n  status?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n};\n\nexport type Core = {\n   __typename?: 'Core',\n  asds_attempts?: Maybe<Scalars['Int']>,\n  asds_landings?: Maybe<Scalars['Int']>,\n  block?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  missions?: Maybe<Array<Maybe<CapsuleMission>>>,\n  original_launch?: Maybe<Scalars['Date']>,\n  reuse_count?: Maybe<Scalars['Int']>,\n  rtls_attempts?: Maybe<Scalars['Int']>,\n  rtls_landings?: Maybe<Scalars['Int']>,\n  status?: Maybe<Scalars['String']>,\n  water_landing?: Maybe<Scalars['Boolean']>,\n};\n\nexport type CoreMission = {\n   __typename?: 'CoreMission',\n  name?: Maybe<Scalars['String']>,\n  flight?: Maybe<Scalars['Int']>,\n};\n\nexport type CoresFind = {\n  asds_attempts?: Maybe<Scalars['Int']>,\n  asds_landings?: Maybe<Scalars['Int']>,\n  block?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['String']>,\n  missions?: Maybe<Scalars['String']>,\n  original_launch?: Maybe<Scalars['Date']>,\n  reuse_count?: Maybe<Scalars['Int']>,\n  rtls_attempts?: Maybe<Scalars['Int']>,\n  rtls_landings?: Maybe<Scalars['Int']>,\n  status?: Maybe<Scalars['String']>,\n  water_landing?: Maybe<Scalars['Boolean']>,\n};\n\n\nexport type Distance = {\n   __typename?: 'Distance',\n  feet?: Maybe<Scalars['Float']>,\n  meters?: Maybe<Scalars['Float']>,\n};\n\nexport type Dragon = {\n   __typename?: 'Dragon',\n  active?: Maybe<Scalars['Boolean']>,\n  crew_capacity?: Maybe<Scalars['Int']>,\n  description?: Maybe<Scalars['String']>,\n  diameter?: Maybe<Distance>,\n  dry_mass_kg?: Maybe<Scalars['Int']>,\n  dry_mass_lb?: Maybe<Scalars['Int']>,\n  first_flight?: Maybe<Scalars['String']>,\n  heat_shield?: Maybe<DragonHeatShield>,\n  height_w_trunk?: Maybe<Distance>,\n  id?: Maybe<Scalars['ID']>,\n  launch_payload_mass?: Maybe<Mass>,\n  launch_payload_vol?: Maybe<Volume>,\n  name?: Maybe<Scalars['String']>,\n  orbit_duration_yr?: Maybe<Scalars['Int']>,\n  pressurized_capsule?: Maybe<DragonPressurizedCapsule>,\n  return_payload_mass?: Maybe<Mass>,\n  return_payload_vol?: Maybe<Volume>,\n  sidewall_angle_deg?: Maybe<Scalars['Float']>,\n  thrusters?: Maybe<Array<Maybe<DragonThrust>>>,\n  trunk?: Maybe<DragonTrunk>,\n  type?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type DragonHeatShield = {\n   __typename?: 'DragonHeatShield',\n  dev_partner?: Maybe<Scalars['String']>,\n  material?: Maybe<Scalars['String']>,\n  size_meters?: Maybe<Scalars['Float']>,\n  temp_degrees?: Maybe<Scalars['Int']>,\n};\n\nexport type DragonPressurizedCapsule = {\n   __typename?: 'DragonPressurizedCapsule',\n  payload_volume?: Maybe<Volume>,\n};\n\nexport type DragonThrust = {\n   __typename?: 'DragonThrust',\n  amount?: Maybe<Scalars['Int']>,\n  fuel_1?: Maybe<Scalars['String']>,\n  fuel_2?: Maybe<Scalars['String']>,\n  pods?: Maybe<Scalars['Int']>,\n  thrust?: Maybe<Force>,\n  type?: Maybe<Scalars['String']>,\n};\n\nexport type DragonTrunk = {\n   __typename?: 'DragonTrunk',\n  cargo?: Maybe<DragonTrunkCargo>,\n  trunk_volume?: Maybe<Volume>,\n};\n\nexport type DragonTrunkCargo = {\n   __typename?: 'DragonTrunkCargo',\n  solar_array?: Maybe<Scalars['Int']>,\n  unpressurized_cargo?: Maybe<Scalars['Boolean']>,\n};\n\nexport type Force = {\n   __typename?: 'Force',\n  kN?: Maybe<Scalars['Float']>,\n  lbf?: Maybe<Scalars['Float']>,\n};\n\nexport type HistoriesResult = {\n   __typename?: 'HistoriesResult',\n  result?: Maybe<Result>,\n  data?: Maybe<Array<Maybe<History>>>,\n};\n\nexport type History = {\n   __typename?: 'History',\n  details?: Maybe<Scalars['String']>,\n  event_date_unix?: Maybe<Scalars['Date']>,\n  event_date_utc?: Maybe<Scalars['Date']>,\n  id?: Maybe<Scalars['ID']>,\n  links?: Maybe<Link>,\n  title?: Maybe<Scalars['String']>,\n  flight?: Maybe<Launch>,\n};\n\nexport type HistoryFind = {\n  end?: Maybe<Scalars['Date']>,\n  flight_number?: Maybe<Scalars['Int']>,\n  id?: Maybe<Scalars['ID']>,\n  start?: Maybe<Scalars['Date']>,\n};\n\nexport type Info = {\n   __typename?: 'Info',\n  ceo?: Maybe<Scalars['String']>,\n  coo?: Maybe<Scalars['String']>,\n  cto_propulsion?: Maybe<Scalars['String']>,\n  cto?: Maybe<Scalars['String']>,\n  employees?: Maybe<Scalars['Int']>,\n  founded?: Maybe<Scalars['Int']>,\n  founder?: Maybe<Scalars['String']>,\n  headquarters?: Maybe<Address>,\n  launch_sites?: Maybe<Scalars['Int']>,\n  links?: Maybe<InfoLinks>,\n  name?: Maybe<Scalars['String']>,\n  summary?: Maybe<Scalars['String']>,\n  test_sites?: Maybe<Scalars['Int']>,\n  valuation?: Maybe<Scalars['Float']>,\n  vehicles?: Maybe<Scalars['Int']>,\n};\n\nexport type InfoLinks = {\n   __typename?: 'InfoLinks',\n  elon_twitter?: Maybe<Scalars['String']>,\n  flickr?: Maybe<Scalars['String']>,\n  twitter?: Maybe<Scalars['String']>,\n  website?: Maybe<Scalars['String']>,\n};\n\nexport type Landpad = {\n   __typename?: 'Landpad',\n  attempted_landings?: Maybe<Scalars['String']>,\n  details?: Maybe<Scalars['String']>,\n  full_name?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  landing_type?: Maybe<Scalars['String']>,\n  location?: Maybe<Location>,\n  status?: Maybe<Scalars['String']>,\n  successful_landings?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type Launch = {\n   __typename?: 'Launch',\n  details?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  is_tentative?: Maybe<Scalars['Boolean']>,\n  launch_date_local?: Maybe<Scalars['Date']>,\n  launch_date_unix?: Maybe<Scalars['Date']>,\n  launch_date_utc?: Maybe<Scalars['Date']>,\n  launch_site?: Maybe<LaunchSite>,\n  launch_success?: Maybe<Scalars['Boolean']>,\n  launch_year?: Maybe<Scalars['String']>,\n  links?: Maybe<LaunchLinks>,\n  mission_id?: Maybe<Array<Maybe<Scalars['String']>>>,\n  mission_name?: Maybe<Scalars['String']>,\n  rocket?: Maybe<LaunchRocket>,\n  static_fire_date_unix?: Maybe<Scalars['Date']>,\n  static_fire_date_utc?: Maybe<Scalars['Date']>,\n  telemetry?: Maybe<LaunchTelemetry>,\n  tentative_max_precision?: Maybe<Scalars['String']>,\n  upcoming?: Maybe<Scalars['Boolean']>,\n  ships?: Maybe<Array<Maybe<Ship>>>,\n};\n\nexport type LaunchesPastResult = {\n   __typename?: 'LaunchesPastResult',\n  result?: Maybe<Result>,\n  data?: Maybe<Array<Maybe<Launch>>>,\n};\n\nexport type LaunchFind = {\n  apoapsis_km?: Maybe<Scalars['Float']>,\n  block?: Maybe<Scalars['Int']>,\n  cap_serial?: Maybe<Scalars['String']>,\n  capsule_reuse?: Maybe<Scalars['String']>,\n  core_flight?: Maybe<Scalars['Int']>,\n  core_reuse?: Maybe<Scalars['String']>,\n  core_serial?: Maybe<Scalars['String']>,\n  customer?: Maybe<Scalars['String']>,\n  eccentricity?: Maybe<Scalars['Float']>,\n  end?: Maybe<Scalars['Date']>,\n  epoch?: Maybe<Scalars['Date']>,\n  fairings_recovered?: Maybe<Scalars['String']>,\n  fairings_recovery_attempt?: Maybe<Scalars['String']>,\n  fairings_reuse?: Maybe<Scalars['String']>,\n  fairings_reused?: Maybe<Scalars['String']>,\n  fairings_ship?: Maybe<Scalars['String']>,\n  gridfins?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  inclination_deg?: Maybe<Scalars['Float']>,\n  land_success?: Maybe<Scalars['String']>,\n  landing_intent?: Maybe<Scalars['String']>,\n  landing_type?: Maybe<Scalars['String']>,\n  landing_vehicle?: Maybe<Scalars['String']>,\n  launch_date_local?: Maybe<Scalars['Date']>,\n  launch_date_utc?: Maybe<Scalars['Date']>,\n  launch_success?: Maybe<Scalars['String']>,\n  launch_year?: Maybe<Scalars['String']>,\n  legs?: Maybe<Scalars['String']>,\n  lifespan_years?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Scalars['String']>,\n  mean_motion?: Maybe<Scalars['Float']>,\n  mission_id?: Maybe<Scalars['String']>,\n  mission_name?: Maybe<Scalars['String']>,\n  nationality?: Maybe<Scalars['String']>,\n  norad_id?: Maybe<Scalars['Int']>,\n  orbit?: Maybe<Scalars['String']>,\n  payload_id?: Maybe<Scalars['String']>,\n  payload_type?: Maybe<Scalars['String']>,\n  periapsis_km?: Maybe<Scalars['Float']>,\n  period_min?: Maybe<Scalars['Float']>,\n  raan?: Maybe<Scalars['Float']>,\n  reference_system?: Maybe<Scalars['String']>,\n  regime?: Maybe<Scalars['String']>,\n  reused?: Maybe<Scalars['String']>,\n  rocket_id?: Maybe<Scalars['String']>,\n  rocket_name?: Maybe<Scalars['String']>,\n  rocket_type?: Maybe<Scalars['String']>,\n  second_stage_block?: Maybe<Scalars['String']>,\n  semi_major_axis_km?: Maybe<Scalars['Float']>,\n  ship?: Maybe<Scalars['String']>,\n  side_core1_reuse?: Maybe<Scalars['String']>,\n  side_core2_reuse?: Maybe<Scalars['String']>,\n  site_id?: Maybe<Scalars['String']>,\n  site_name_long?: Maybe<Scalars['String']>,\n  site_name?: Maybe<Scalars['String']>,\n  start?: Maybe<Scalars['Date']>,\n  tbd?: Maybe<Scalars['String']>,\n  tentative_max_precision?: Maybe<Scalars['String']>,\n  tentative?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchLinks = {\n   __typename?: 'LaunchLinks',\n  article_link?: Maybe<Scalars['String']>,\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>,\n  mission_patch_small?: Maybe<Scalars['String']>,\n  mission_patch?: Maybe<Scalars['String']>,\n  presskit?: Maybe<Scalars['String']>,\n  reddit_campaign?: Maybe<Scalars['String']>,\n  reddit_launch?: Maybe<Scalars['String']>,\n  reddit_media?: Maybe<Scalars['String']>,\n  reddit_recovery?: Maybe<Scalars['String']>,\n  video_link?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type Launchpad = {\n   __typename?: 'Launchpad',\n  attempted_launches?: Maybe<Scalars['Int']>,\n  details?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  location?: Maybe<Location>,\n  name?: Maybe<Scalars['String']>,\n  status?: Maybe<Scalars['String']>,\n  successful_launches?: Maybe<Scalars['Int']>,\n  vehicles_launched?: Maybe<Array<Maybe<Rocket>>>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchRocket = {\n   __typename?: 'LaunchRocket',\n  fairings?: Maybe<LaunchRocketFairings>,\n  first_stage?: Maybe<LaunchRocketFirstStage>,\n  rocket_name?: Maybe<Scalars['String']>,\n  rocket_type?: Maybe<Scalars['String']>,\n  rocket?: Maybe<Rocket>,\n  second_stage?: Maybe<LaunchRocketSecondStage>,\n};\n\nexport type LaunchRocketFairings = {\n   __typename?: 'LaunchRocketFairings',\n  recovered?: Maybe<Scalars['Boolean']>,\n  recovery_attempt?: Maybe<Scalars['Boolean']>,\n  reused?: Maybe<Scalars['Boolean']>,\n  ship?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchRocketFirstStage = {\n   __typename?: 'LaunchRocketFirstStage',\n  cores?: Maybe<Array<Maybe<LaunchRocketFirstStageCore>>>,\n};\n\nexport type LaunchRocketFirstStageCore = {\n   __typename?: 'LaunchRocketFirstStageCore',\n  block?: Maybe<Scalars['Int']>,\n  core?: Maybe<Core>,\n  flight?: Maybe<Scalars['Int']>,\n  gridfins?: Maybe<Scalars['Boolean']>,\n  land_success?: Maybe<Scalars['Boolean']>,\n  landing_intent?: Maybe<Scalars['Boolean']>,\n  landing_type?: Maybe<Scalars['String']>,\n  landing_vehicle?: Maybe<Scalars['String']>,\n  legs?: Maybe<Scalars['Boolean']>,\n  reused?: Maybe<Scalars['Boolean']>,\n};\n\nexport type LaunchRocketSecondStage = {\n   __typename?: 'LaunchRocketSecondStage',\n  block?: Maybe<Scalars['Int']>,\n  payloads?: Maybe<Array<Maybe<Payload>>>,\n};\n\nexport type LaunchSite = {\n   __typename?: 'LaunchSite',\n  site_id?: Maybe<Scalars['String']>,\n  site_name_long?: Maybe<Scalars['String']>,\n  site_name?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchTelemetry = {\n   __typename?: 'LaunchTelemetry',\n  flight_club?: Maybe<Scalars['String']>,\n};\n\nexport type Link = {\n   __typename?: 'Link',\n  article?: Maybe<Scalars['String']>,\n  reddit?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type Location = {\n   __typename?: 'Location',\n  latitude?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n  name?: Maybe<Scalars['String']>,\n  region?: Maybe<Scalars['String']>,\n};\n\nexport type Mass = {\n   __typename?: 'Mass',\n  kg?: Maybe<Scalars['Int']>,\n  lb?: Maybe<Scalars['Int']>,\n};\n\nexport type Mission = {\n   __typename?: 'Mission',\n  description?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>,\n  name?: Maybe<Scalars['String']>,\n  twitter?: Maybe<Scalars['String']>,\n  website?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n  payloads?: Maybe<Array<Maybe<Payload>>>,\n};\n\nexport type MissionResult = {\n   __typename?: 'MissionResult',\n  result?: Maybe<Result>,\n  data?: Maybe<Array<Maybe<Mission>>>,\n};\n\nexport type MissionsFind = {\n  id?: Maybe<Scalars['ID']>,\n  manufacturer?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  payload_id?: Maybe<Scalars['String']>,\n};\n\n\nexport type Payload = {\n   __typename?: 'Payload',\n  customers?: Maybe<Array<Maybe<Scalars['String']>>>,\n  id?: Maybe<Scalars['ID']>,\n  manufacturer?: Maybe<Scalars['String']>,\n  nationality?: Maybe<Scalars['String']>,\n  norad_id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  orbit_params?: Maybe<PayloadOrbitParams>,\n  orbit?: Maybe<Scalars['String']>,\n  payload_mass_kg?: Maybe<Scalars['Float']>,\n  payload_mass_lbs?: Maybe<Scalars['Float']>,\n  payload_type?: Maybe<Scalars['String']>,\n  reused?: Maybe<Scalars['Boolean']>,\n};\n\nexport type PayloadOrbitParams = {\n   __typename?: 'PayloadOrbitParams',\n  apoapsis_km?: Maybe<Scalars['Float']>,\n  arg_of_pericenter?: Maybe<Scalars['Float']>,\n  eccentricity?: Maybe<Scalars['Float']>,\n  epoch?: Maybe<Scalars['Date']>,\n  inclination_deg?: Maybe<Scalars['Float']>,\n  lifespan_years?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n  mean_anomaly?: Maybe<Scalars['Float']>,\n  mean_motion?: Maybe<Scalars['Float']>,\n  periapsis_km?: Maybe<Scalars['Float']>,\n  period_min?: Maybe<Scalars['Float']>,\n  raan?: Maybe<Scalars['Float']>,\n  reference_system?: Maybe<Scalars['String']>,\n  regime?: Maybe<Scalars['String']>,\n  semi_major_axis_km?: Maybe<Scalars['Float']>,\n};\n\nexport type PayloadsFind = {\n  apoapsis_km?: Maybe<Scalars['Float']>,\n  customer?: Maybe<Scalars['String']>,\n  eccentricity?: Maybe<Scalars['Float']>,\n  epoch?: Maybe<Scalars['Date']>,\n  inclination_deg?: Maybe<Scalars['Float']>,\n  lifespan_years?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n  manufacturer?: Maybe<Scalars['String']>,\n  mean_motion?: Maybe<Scalars['Float']>,\n  nationality?: Maybe<Scalars['String']>,\n  norad_id?: Maybe<Scalars['Int']>,\n  orbit?: Maybe<Scalars['String']>,\n  payload_id?: Maybe<Scalars['ID']>,\n  payload_type?: Maybe<Scalars['String']>,\n  periapsis_km?: Maybe<Scalars['Float']>,\n  period_min?: Maybe<Scalars['Float']>,\n  raan?: Maybe<Scalars['Float']>,\n  reference_system?: Maybe<Scalars['String']>,\n  regime?: Maybe<Scalars['String']>,\n  reused?: Maybe<Scalars['Boolean']>,\n  semi_major_axis_km?: Maybe<Scalars['Float']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  capsules?: Maybe<Array<Maybe<Capsule>>>,\n  capsulesPast?: Maybe<Array<Maybe<Capsule>>>,\n  capsulesUpcoming?: Maybe<Array<Maybe<Capsule>>>,\n  capsule?: Maybe<Capsule>,\n  company?: Maybe<Info>,\n  cores?: Maybe<Array<Maybe<Core>>>,\n  coresPast?: Maybe<Array<Maybe<Core>>>,\n  coresUpcoming?: Maybe<Array<Maybe<Core>>>,\n  core?: Maybe<Core>,\n  dragons?: Maybe<Array<Maybe<Dragon>>>,\n  dragon?: Maybe<Dragon>,\n  histories?: Maybe<Array<Maybe<History>>>,\n  historiesResult?: Maybe<HistoriesResult>,\n  history?: Maybe<History>,\n  landpads?: Maybe<Array<Maybe<Landpad>>>,\n  landpad?: Maybe<Landpad>,\n  launches?: Maybe<Array<Maybe<Launch>>>,\n  launchesPast?: Maybe<Array<Maybe<Launch>>>,\n  launchesPastResult?: Maybe<LaunchesPastResult>,\n  launchesUpcoming?: Maybe<Array<Maybe<Launch>>>,\n  launch?: Maybe<Launch>,\n  launchLatest?: Maybe<Launch>,\n  launchNext?: Maybe<Launch>,\n  launchpads?: Maybe<Array<Maybe<Launchpad>>>,\n  launchpad?: Maybe<Launchpad>,\n  missions?: Maybe<Array<Maybe<Mission>>>,\n  missionsResult?: Maybe<MissionResult>,\n  mission?: Maybe<Mission>,\n  payloads?: Maybe<Array<Maybe<Payload>>>,\n  payload?: Maybe<Payload>,\n  roadster?: Maybe<Roadster>,\n  rockets?: Maybe<Array<Maybe<Rocket>>>,\n  rocketsResult?: Maybe<RocketsResult>,\n  rocket?: Maybe<Rocket>,\n  ships?: Maybe<Array<Maybe<Ship>>>,\n  shipsResult?: Maybe<ShipsResult>,\n  ship?: Maybe<Ship>,\n};\n\n\nexport type QueryCapsulesArgs = {\n  find?: Maybe<CapsulesFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryCapsulesPastArgs = {\n  find?: Maybe<CapsulesFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryCapsulesUpcomingArgs = {\n  find?: Maybe<CapsulesFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryCapsuleArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryCoresArgs = {\n  find?: Maybe<CoresFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryCoresPastArgs = {\n  find?: Maybe<CoresFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryCoresUpcomingArgs = {\n  find?: Maybe<CoresFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryCoreArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryDragonsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryDragonArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryHistoriesArgs = {\n  find?: Maybe<HistoryFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryHistoriesResultArgs = {\n  find?: Maybe<HistoryFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryHistoryArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryLandpadsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryLandpadArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryLaunchesArgs = {\n  find?: Maybe<LaunchFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryLaunchesPastArgs = {\n  find?: Maybe<LaunchFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryLaunchesPastResultArgs = {\n  find?: Maybe<LaunchFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryLaunchesUpcomingArgs = {\n  find?: Maybe<LaunchFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryLaunchArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryLaunchLatestArgs = {\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryLaunchNextArgs = {\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryLaunchpadsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryLaunchpadArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryMissionsArgs = {\n  find?: Maybe<MissionsFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryMissionsResultArgs = {\n  find?: Maybe<MissionsFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryMissionArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryPayloadsArgs = {\n  find?: Maybe<PayloadsFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryPayloadArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryRocketsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryRocketsResultArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryRocketArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryShipsArgs = {\n  find?: Maybe<ShipsFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryShipsResultArgs = {\n  find?: Maybe<ShipsFind>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Scalars['String']>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryShipArgs = {\n  id: Scalars['ID']\n};\n\nexport type Result = {\n   __typename?: 'Result',\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type Roadster = {\n   __typename?: 'Roadster',\n  apoapsis_au?: Maybe<Scalars['Float']>,\n  details?: Maybe<Scalars['String']>,\n  earth_distance_km?: Maybe<Scalars['Float']>,\n  earth_distance_mi?: Maybe<Scalars['Float']>,\n  eccentricity?: Maybe<Scalars['Float']>,\n  epoch_jd?: Maybe<Scalars['Float']>,\n  inclination?: Maybe<Scalars['Float']>,\n  launch_date_unix?: Maybe<Scalars['Date']>,\n  launch_date_utc?: Maybe<Scalars['Date']>,\n  launch_mass_kg?: Maybe<Scalars['Int']>,\n  launch_mass_lbs?: Maybe<Scalars['Int']>,\n  longitude?: Maybe<Scalars['Float']>,\n  mars_distance_km?: Maybe<Scalars['Float']>,\n  mars_distance_mi?: Maybe<Scalars['Float']>,\n  name?: Maybe<Scalars['String']>,\n  norad_id?: Maybe<Scalars['Int']>,\n  orbit_type?: Maybe<Scalars['Float']>,\n  periapsis_arg?: Maybe<Scalars['Float']>,\n  periapsis_au?: Maybe<Scalars['Float']>,\n  period_days?: Maybe<Scalars['Float']>,\n  semi_major_axis_au?: Maybe<Scalars['Float']>,\n  speed_kph?: Maybe<Scalars['Float']>,\n  speed_mph?: Maybe<Scalars['Float']>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type Rocket = {\n   __typename?: 'Rocket',\n  active?: Maybe<Scalars['Boolean']>,\n  boosters?: Maybe<Scalars['Int']>,\n  company?: Maybe<Scalars['String']>,\n  cost_per_launch?: Maybe<Scalars['Int']>,\n  country?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n  diameter?: Maybe<Distance>,\n  engines?: Maybe<RocketEngines>,\n  first_flight?: Maybe<Scalars['Date']>,\n  first_stage?: Maybe<RocketFirstStage>,\n  height?: Maybe<Distance>,\n  id?: Maybe<Scalars['ID']>,\n  landing_legs?: Maybe<RocketLandingLegs>,\n  mass?: Maybe<Mass>,\n  name?: Maybe<Scalars['String']>,\n  payload_weights?: Maybe<Array<Maybe<RocketPayloadWeight>>>,\n  second_stage?: Maybe<RocketSecondStage>,\n  stages?: Maybe<Scalars['Int']>,\n  success_rate_pct?: Maybe<Scalars['Int']>,\n  type?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type RocketEngines = {\n   __typename?: 'RocketEngines',\n  number?: Maybe<Scalars['Int']>,\n  type?: Maybe<Scalars['String']>,\n  version?: Maybe<Scalars['String']>,\n  layout?: Maybe<Scalars['String']>,\n  engine_loss_max?: Maybe<Scalars['String']>,\n  propellant_1?: Maybe<Scalars['String']>,\n  propellant_2?: Maybe<Scalars['String']>,\n  thrust_sea_level?: Maybe<Force>,\n  thrust_vacuum?: Maybe<Force>,\n  thrust_to_weight?: Maybe<Scalars['Float']>,\n};\n\nexport type RocketFirstStage = {\n   __typename?: 'RocketFirstStage',\n  burn_time_sec?: Maybe<Scalars['Int']>,\n  engines?: Maybe<Scalars['Int']>,\n  fuel_amount_tons?: Maybe<Scalars['Float']>,\n  reusable?: Maybe<Scalars['Boolean']>,\n  thrust_sea_level?: Maybe<Force>,\n  thrust_vacuum?: Maybe<Force>,\n};\n\nexport type RocketLandingLegs = {\n   __typename?: 'RocketLandingLegs',\n  number?: Maybe<Scalars['Int']>,\n  material?: Maybe<Scalars['String']>,\n};\n\nexport type RocketPayloadWeight = {\n   __typename?: 'RocketPayloadWeight',\n  id?: Maybe<Scalars['String']>,\n  kg?: Maybe<Scalars['Int']>,\n  lb?: Maybe<Scalars['Int']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type RocketSecondStage = {\n   __typename?: 'RocketSecondStage',\n  burn_time_sec?: Maybe<Scalars['Int']>,\n  engines?: Maybe<Scalars['Int']>,\n  fuel_amount_tons?: Maybe<Scalars['Float']>,\n  payloads?: Maybe<RocketSecondStagePayloads>,\n  thrust?: Maybe<Force>,\n};\n\nexport type RocketSecondStagePayloadCompositeFairing = {\n   __typename?: 'RocketSecondStagePayloadCompositeFairing',\n  height?: Maybe<Distance>,\n  diameter?: Maybe<Distance>,\n};\n\nexport type RocketSecondStagePayloads = {\n   __typename?: 'RocketSecondStagePayloads',\n  option_1?: Maybe<Scalars['String']>,\n  composite_fairing?: Maybe<RocketSecondStagePayloadCompositeFairing>,\n};\n\nexport type RocketsResult = {\n   __typename?: 'RocketsResult',\n  result?: Maybe<Result>,\n  data?: Maybe<Array<Maybe<Rocket>>>,\n};\n\nexport type Ship = {\n   __typename?: 'Ship',\n  abs?: Maybe<Scalars['Int']>,\n  active?: Maybe<Scalars['Boolean']>,\n  attempted_landings?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['Int']>,\n  course_deg?: Maybe<Scalars['Int']>,\n  home_port?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  image?: Maybe<Scalars['String']>,\n  imo?: Maybe<Scalars['Int']>,\n  missions?: Maybe<Array<Maybe<ShipMission>>>,\n  mmsi?: Maybe<Scalars['Int']>,\n  model?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  position?: Maybe<ShipLocation>,\n  roles?: Maybe<Array<Maybe<Scalars['String']>>>,\n  speed_kn?: Maybe<Scalars['Float']>,\n  status?: Maybe<Scalars['String']>,\n  successful_landings?: Maybe<Scalars['Int']>,\n  type?: Maybe<Scalars['String']>,\n  url?: Maybe<Scalars['String']>,\n  weight_kg?: Maybe<Scalars['Int']>,\n  weight_lbs?: Maybe<Scalars['Int']>,\n  year_built?: Maybe<Scalars['Int']>,\n};\n\nexport type ShipLocation = {\n   __typename?: 'ShipLocation',\n  latitude?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n};\n\nexport type ShipMission = {\n   __typename?: 'ShipMission',\n  flight?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type ShipsFind = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  model?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  role?: Maybe<Scalars['String']>,\n  active?: Maybe<Scalars['Boolean']>,\n  imo?: Maybe<Scalars['Int']>,\n  mmsi?: Maybe<Scalars['Int']>,\n  abs?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['Int']>,\n  weight_lbs?: Maybe<Scalars['Int']>,\n  weight_kg?: Maybe<Scalars['Int']>,\n  year_built?: Maybe<Scalars['Int']>,\n  home_port?: Maybe<Scalars['String']>,\n  status?: Maybe<Scalars['String']>,\n  speed_kn?: Maybe<Scalars['Int']>,\n  course_deg?: Maybe<Scalars['Int']>,\n  latitude?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n  successful_landings?: Maybe<Scalars['Int']>,\n  attempted_landings?: Maybe<Scalars['Int']>,\n  mission?: Maybe<Scalars['String']>,\n};\n\nexport type ShipsResult = {\n   __typename?: 'ShipsResult',\n  result?: Maybe<Result>,\n  data?: Maybe<Array<Maybe<Ship>>>,\n};\n\nexport type Volume = {\n   __typename?: 'Volume',\n  cubic_feet?: Maybe<Scalars['Int']>,\n  cubic_meters?: Maybe<Scalars['Int']>,\n};\n\nexport type LaunchDetailsQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type LaunchDetailsQuery = (\n  { __typename?: 'Query' }\n  & { launch: Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'id' | 'mission_name' | 'details'>\n    & { links: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'flickr_images' | 'mission_patch'>\n    )> }\n  )> }\n);\n\nexport type PastLaunchesListQueryVariables = {\n  limit: Scalars['Int']\n};\n\n\nexport type PastLaunchesListQuery = (\n  { __typename?: 'Query' }\n  & { launchesPast: Maybe<Array<Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'id' | 'mission_name' | 'launch_date_utc'>\n    & { links: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'flickr_images' | 'mission_patch_small'>\n    )>, rocket: Maybe<(\n      { __typename?: 'LaunchRocket' }\n      & Pick<LaunchRocket, 'rocket_name'>\n    )> }\n  )>>> }\n);\n\n\nexport const LaunchDetailsDocument = gql`\n    query launchDetails($id: ID!) {\n  launch(id: $id) {\n    id\n    mission_name\n    details\n    links {\n      flickr_images\n      mission_patch\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class LaunchDetailsGQL extends Apollo.Query<LaunchDetailsQuery, LaunchDetailsQueryVariables> {\n    document = LaunchDetailsDocument;\n    \n  }\nexport const PastLaunchesListDocument = gql`\n    query pastLaunchesList($limit: Int!) {\n  launchesPast(limit: $limit) {\n    id\n    mission_name\n    links {\n      flickr_images\n      mission_patch_small\n    }\n    rocket {\n      rocket_name\n    }\n    launch_date_utc\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class PastLaunchesListGQL extends Apollo.Query<PastLaunchesListQuery, PastLaunchesListQueryVariables> {\n    document = PastLaunchesListDocument;\n    \n  }","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}